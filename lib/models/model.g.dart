// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Sked.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Sked TABLE
class TableSked extends SqfEntityTableBase {
  TableSked() {
    // declare properties of EntityTable
    tableName = 'skeds';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('operator_name', DbType.text),
      SqfEntityFieldBase('client_name', DbType.text),
      SqfEntityFieldBase('work_type', DbType.integer),
      SqfEntityFieldBase('data_type', DbType.integer),
      SqfEntityFieldBase('created_at', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('is_sended', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('signature', DbType.blob),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSked();
  }
}

// Sked_row TABLE
class TableSked_row extends SqfEntityTableBase {
  TableSked_row() {
    // declare properties of EntityTable
    tableName = 'sked_rows';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('operator_name', DbType.text),
      SqfEntityFieldBase('sort', DbType.integer),
      SqfEntityFieldBase('sked_id', DbType.integer),
      SqfEntityFieldRelationshipBase(TableSked.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'skedsId',
          defaultValue: 0),
      SqfEntityFieldBase('data', DbType.text),
      SqfEntityFieldBase('created_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSked_row();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyAppDatabaseModel extends SqfEntityModelProvider {
  MyAppDatabaseModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableSked.getInstance,
      TableSked_row.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Sked
class Sked extends TableBase {
  Sked(
      {this.id,
      this.operator_name,
      this.client_name,
      this.work_type,
      this.data_type,
      this.created_at,
      this.is_sended,
      this.signature}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Sked.withFields(this.operator_name, this.client_name, this.work_type,
      this.data_type, this.created_at, this.is_sended, this.signature) {
    _setDefaultValues();
  }
  Sked.withId(this.id, this.operator_name, this.client_name, this.work_type,
      this.data_type, this.created_at, this.is_sended, this.signature) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Sked.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['operator_name'] != null) {
      operator_name = o['operator_name'].toString();
    }
    if (o['client_name'] != null) {
      client_name = o['client_name'].toString();
    }
    if (o['work_type'] != null) {
      work_type = int.tryParse(o['work_type'].toString());
    }
    if (o['data_type'] != null) {
      data_type = int.tryParse(o['data_type'].toString());
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    if (o['is_sended'] != null) {
      is_sended = o['is_sended'].toString() == '1' ||
          o['is_sended'].toString() == 'true';
    }
    if (o['signature'] != null) {
      signature = o['signature'] as Uint8List;
    }
  }
  // FIELDS (Sked)
  int? id;
  String? operator_name;
  String? client_name;
  int? work_type;
  int? data_type;
  DateTime? created_at;
  bool? is_sended;
  Uint8List? signature;

  // end FIELDS (Sked)

// COLLECTIONS & VIRTUALS (Sked)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSked_rows', 'plField2'..]) or so on..
  List<Sked_row>? plSked_rows;

  /// get Sked_row(s) filtered by id=skedsId
  Sked_rowFilterBuilder? getSked_rows(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Sked_row()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .skedsId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Sked)

  static const bool _softDeleteActivated = false;
  SkedManager? __mnSked;

  SkedManager get _mnSked {
    return __mnSked = __mnSked ?? SkedManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (operator_name != null || !forView) {
      map['operator_name'] = operator_name;
    }
    if (client_name != null || !forView) {
      map['client_name'] = client_name;
    }
    if (work_type != null || !forView) {
      map['work_type'] = work_type;
    }
    if (data_type != null || !forView) {
      map['data_type'] = data_type;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (is_sended != null) {
      map['is_sended'] = forQuery ? (is_sended! ? 1 : 0) : is_sended;
    } else if (is_sended != null || !forView) {
      map['is_sended'] = null;
    }
    if (signature != null || !forView) {
      map['signature'] = signature;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (operator_name != null || !forView) {
      map['operator_name'] = operator_name;
    }
    if (client_name != null || !forView) {
      map['client_name'] = client_name;
    }
    if (work_type != null || !forView) {
      map['work_type'] = work_type;
    }
    if (data_type != null || !forView) {
      map['data_type'] = data_type;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (is_sended != null) {
      map['is_sended'] = forQuery ? (is_sended! ? 1 : 0) : is_sended;
    } else if (is_sended != null || !forView) {
      map['is_sended'] = null;
    }
    if (signature != null || !forView) {
      map['signature'] = signature;
    }

// COLLECTIONS (Sked)
    if (!forQuery) {
      map['Sked_rows'] = await getSked_rows()!.toMapList();
    }
// END COLLECTIONS (Sked)

    return map;
  }

  /// This method returns Json String [Sked]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Sked]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      operator_name,
      client_name,
      work_type,
      data_type,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      is_sended,
      signature
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      operator_name,
      client_name,
      work_type,
      data_type,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      is_sended,
      signature
    ];
  }

  static Future<List<Sked>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sked.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Sked>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Sked>[];
    try {
      objList = list
          .map((sked) => Sked.fromMap(sked as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sked.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Sked>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Sked> objList = <Sked>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Sked.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('skeds.plSked_rows') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSked_rows'))) {
          /*_loadedfields!.add('skeds.plSked_rows'); */ obj.plSked_rows =
              obj.plSked_rows ??
                  await obj.getSked_rows()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Sked by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Sked] if exist, otherwise returns null
  Future<Sked?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Sked? obj;
    final data = await _mnSked.getById([id]);
    if (data.length != 0) {
      obj = Sked.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('skeds.plSked_rows') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSked_rows'))) {
          /*_loadedfields!.add('skeds.plSked_rows'); */ obj.plSked_rows =
              obj.plSked_rows ??
                  await obj.getSked_rows()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Sked) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSked.insert(this, ignoreBatch);
    } else {
      await _mnSked.update(this);
    }

    return id;
  }

  /// Saves the (Sked) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSked.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSked.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Sked. Returns a new Primary Key value of Sked

  /// <returns>Returns a new Primary Key value of Sked
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<Sked> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Sked> skeds) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyAppDatabaseModel().batchStart();
    for (final obj in skeds) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyAppDatabaseModel().batchCommit();
      for (int i = 0; i < skeds.length; i++) {
        if (skeds[i].id == null) {
          skeds[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSked.rawInsert(
          'INSERT OR REPLACE INTO skeds (id, operator_name, client_name, work_type, data_type, created_at, is_sended, signature)  VALUES (?,?,?,?,?,?,?,?)',
          [
            id,
            operator_name,
            client_name,
            work_type,
            data_type,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            is_sended,
            signature
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Sked id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Sked id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Sked Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Sked>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Sked> skeds) async {
    final results = await _mnSked.rawInsertAll(
        'INSERT OR REPLACE INTO skeds (id, operator_name, client_name, work_type, data_type, created_at, is_sended, signature)  VALUES (?,?,?,?,?,?,?,?)',
        skeds);
    return results;
  }

  /// Deletes Sked

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Sked invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Sked_row().select().skedsId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnSked
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSked.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Sked] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  SkedFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SkedFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SkedFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SkedFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    created_at = created_at ?? DateTime.now();
    is_sended = is_sended ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion sked

// region SkedField
class SkedField extends FilterBase {
  SkedField(SkedFilterBuilder skedFB) : super(skedFB);

  @override
  SkedFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder isNull() {
    return super.isNull() as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SkedFilterBuilder;
  }

  @override
  SkedFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SkedFilterBuilder;
  }

  @override
  SkedField get not {
    return super.not as SkedField;
  }
}
// endregion SkedField

// region SkedFilterBuilder
class SkedFilterBuilder extends ConjunctionBase {
  SkedFilterBuilder(Sked obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnSked = obj._mnSked;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SkedManager? _mnSked;

  /// put the sql keyword 'AND'
  @override
  SkedFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SkedFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SkedFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SkedFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SkedFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SkedFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SkedFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SkedFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SkedFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SkedFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SkedFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SkedField _setField(SkedField? field, String colName, DbType dbtype) {
    return SkedField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SkedField? _id;
  SkedField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SkedField? _operator_name;
  SkedField get operator_name {
    return _operator_name =
        _setField(_operator_name, 'operator_name', DbType.text);
  }

  SkedField? _client_name;
  SkedField get client_name {
    return _client_name = _setField(_client_name, 'client_name', DbType.text);
  }

  SkedField? _work_type;
  SkedField get work_type {
    return _work_type = _setField(_work_type, 'work_type', DbType.integer);
  }

  SkedField? _data_type;
  SkedField get data_type {
    return _data_type = _setField(_data_type, 'data_type', DbType.integer);
  }

  SkedField? _created_at;
  SkedField get created_at {
    return _created_at = _setField(_created_at, 'created_at', DbType.datetime);
  }

  SkedField? _is_sended;
  SkedField get is_sended {
    return _is_sended = _setField(_is_sended, 'is_sended', DbType.bool);
  }

  SkedField? _signature;
  SkedField get signature {
    return _signature = _setField(_signature, 'signature', DbType.blob);
  }

  /// Deletes List<Sked> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Sked_row) according to DeleteRule.CASCADE
    final idListSked_rowBYskedsId = toListPrimaryKeySQL(false);
    final resSked_rowBYskedsId = await Sked_row()
        .select()
        .where('skedsId IN (${idListSked_rowBYskedsId['sql']})',
            parameterValue: idListSked_rowBYskedsId['args'])
        .delete(hardDelete);
    if (!resSked_rowBYskedsId.success) {
      return resSked_rowBYskedsId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSked!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSked!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from skeds ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSked!.updateBatch(qparams, values);
  }

  /// This method always returns [Sked] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sked?
  @override
  Future<Sked?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSked!.toList(qparams);
    final data = await objFuture;
    Sked? obj;
    if (data.isNotEmpty) {
      obj = Sked.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('skeds.plSked_rows') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSked_rows'))) {
          /*_loadedfields!.add('skeds.plSked_rows'); */ obj.plSked_rows =
              obj.plSked_rows ??
                  await obj.getSked_rows()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Sked]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sked?
  @override
  Future<Sked> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Sked();
  }

  /// This method returns int. [Sked]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? skedCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final skedsFuture = await _mnSked!.toList(qparams);
    final int count = skedsFuture[0]['CNT'] as int;
    if (skedCount != null) {
      skedCount(count);
    }
    return count;
  }

  /// This method returns List<Sked> [Sked]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Sked>
  @override
  Future<List<Sked>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Sked> skedsData = await Sked.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return skedsData;
  }

  /// This method returns Json String [Sked]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Sked]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Sked]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSked!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Sked]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM skeds WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSked!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Sked]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSked!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Sked.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSked!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SkedFilterBuilder

// region SkedFields
class SkedFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fOperator_name;
  static TableField get operator_name {
    return _fOperator_name = _fOperator_name ??
        SqlSyntax.setField(_fOperator_name, 'operator_name', DbType.text);
  }

  static TableField? _fClient_name;
  static TableField get client_name {
    return _fClient_name = _fClient_name ??
        SqlSyntax.setField(_fClient_name, 'client_name', DbType.text);
  }

  static TableField? _fWork_type;
  static TableField get work_type {
    return _fWork_type = _fWork_type ??
        SqlSyntax.setField(_fWork_type, 'work_type', DbType.integer);
  }

  static TableField? _fData_type;
  static TableField get data_type {
    return _fData_type = _fData_type ??
        SqlSyntax.setField(_fData_type, 'data_type', DbType.integer);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.datetime);
  }

  static TableField? _fIs_sended;
  static TableField get is_sended {
    return _fIs_sended = _fIs_sended ??
        SqlSyntax.setField(_fIs_sended, 'is_sended', DbType.bool);
  }

  static TableField? _fSignature;
  static TableField get signature {
    return _fSignature = _fSignature ??
        SqlSyntax.setField(_fSignature, 'signature', DbType.blob);
  }
}
// endregion SkedFields

//region SkedManager
class SkedManager extends SqfEntityProvider {
  SkedManager()
      : super(MyAppDatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'skeds';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SkedManager
// region Sked_row
class Sked_row extends TableBase {
  Sked_row(
      {this.id,
      this.operator_name,
      this.sort,
      this.sked_id,
      this.skedsId,
      this.data,
      this.created_at}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Sked_row.withFields(this.operator_name, this.sort, this.sked_id, this.skedsId,
      this.data, this.created_at) {
    _setDefaultValues();
  }
  Sked_row.withId(this.id, this.operator_name, this.sort, this.sked_id,
      this.skedsId, this.data, this.created_at) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Sked_row.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['operator_name'] != null) {
      operator_name = o['operator_name'].toString();
    }
    if (o['sort'] != null) {
      sort = int.tryParse(o['sort'].toString());
    }
    if (o['sked_id'] != null) {
      sked_id = int.tryParse(o['sked_id'].toString());
    }
    skedsId = int.tryParse(o['skedsId'].toString());

    if (o['data'] != null) {
      data = o['data'].toString();
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }

    // RELATIONSHIPS FromMAP
    plSked = o['sked'] != null
        ? Sked.fromMap(o['sked'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Sked_row)
  int? id;
  String? operator_name;
  int? sort;
  int? sked_id;
  int? skedsId;
  String? data;
  DateTime? created_at;

  // end FIELDS (Sked_row)

// RELATIONSHIPS (Sked_row)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSked', 'plField2'..]) or so on..
  Sked? plSked;

  /// get Sked By SkedsId
  Future<Sked?> getSked(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Sked()
        .getById(skedsId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Sked_row)

  static const bool _softDeleteActivated = false;
  Sked_rowManager? __mnSked_row;

  Sked_rowManager get _mnSked_row {
    return __mnSked_row = __mnSked_row ?? Sked_rowManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (operator_name != null || !forView) {
      map['operator_name'] = operator_name;
    }
    if (sort != null || !forView) {
      map['sort'] = sort;
    }
    if (sked_id != null || !forView) {
      map['sked_id'] = sked_id;
    }
    if (skedsId != null) {
      map['skedsId'] = forView
          ? plSked == null
              ? skedsId
              : plSked!.operator_name
          : skedsId;
    } else if (skedsId != null || !forView) {
      map['skedsId'] = null;
    }
    if (data != null || !forView) {
      map['data'] = data;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (operator_name != null || !forView) {
      map['operator_name'] = operator_name;
    }
    if (sort != null || !forView) {
      map['sort'] = sort;
    }
    if (sked_id != null || !forView) {
      map['sked_id'] = sked_id;
    }
    if (skedsId != null) {
      map['skedsId'] = forView
          ? plSked == null
              ? skedsId
              : plSked!.operator_name
          : skedsId;
    } else if (skedsId != null || !forView) {
      map['skedsId'] = null;
    }
    if (data != null || !forView) {
      map['data'] = data;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }

    return map;
  }

  /// This method returns Json String [Sked_row]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Sked_row]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      operator_name,
      sort,
      sked_id,
      skedsId,
      data,
      created_at != null ? created_at!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      operator_name,
      sort,
      sked_id,
      skedsId,
      data,
      created_at != null ? created_at!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Sked_row>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sked_row.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Sked_row>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Sked_row>[];
    try {
      objList = list
          .map((sked_row) => Sked_row.fromMap(sked_row as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sked_row.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Sked_row>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Sked_row> objList = <Sked_row>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Sked_row.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSked'))) {
          obj.plSked =
              obj.plSked ?? await obj.getSked(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Sked_row by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Sked_row] if exist, otherwise returns null
  Future<Sked_row?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Sked_row? obj;
    final data = await _mnSked_row.getById([id]);
    if (data.length != 0) {
      obj = Sked_row.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSked'))) {
          obj.plSked =
              obj.plSked ?? await obj.getSked(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Sked_row) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSked_row.insert(this, ignoreBatch);
    } else {
      await _mnSked_row.update(this);
    }

    return id;
  }

  /// Saves the (Sked_row) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSked_row.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSked_row.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Sked_row. Returns a new Primary Key value of Sked_row

  /// <returns>Returns a new Primary Key value of Sked_row
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<Sked_row> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Sked_row> sked_rows) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyAppDatabaseModel().batchStart();
    for (final obj in sked_rows) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyAppDatabaseModel().batchCommit();
      for (int i = 0; i < sked_rows.length; i++) {
        if (sked_rows[i].id == null) {
          sked_rows[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSked_row.rawInsert(
          'INSERT OR REPLACE INTO sked_rows (id, operator_name, sort, sked_id, skedsId, data, created_at)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            operator_name,
            sort,
            sked_id,
            skedsId,
            data,
            created_at != null ? created_at!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Sked_row id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Sked_row id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Sked_row Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Sked_row>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Sked_row> sked_rows) async {
    final results = await _mnSked_row.rawInsertAll(
        'INSERT OR REPLACE INTO sked_rows (id, operator_name, sort, sked_id, skedsId, data, created_at)  VALUES (?,?,?,?,?,?,?)',
        sked_rows);
    return results;
  }

  /// Deletes Sked_row

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Sked_row invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnSked_row
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSked_row.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Sked_row] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Sked_rowFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Sked_rowFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Sked_rowFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Sked_rowFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    skedsId = skedsId ?? 0;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion sked_row

// region Sked_rowField
class Sked_rowField extends FilterBase {
  Sked_rowField(Sked_rowFilterBuilder sked_rowFB) : super(sked_rowFB);

  @override
  Sked_rowFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder isNull() {
    return super.isNull() as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Sked_rowFilterBuilder;
  }

  @override
  Sked_rowField get not {
    return super.not as Sked_rowField;
  }
}
// endregion Sked_rowField

// region Sked_rowFilterBuilder
class Sked_rowFilterBuilder extends ConjunctionBase {
  Sked_rowFilterBuilder(Sked_row obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSked_row = obj._mnSked_row;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Sked_rowManager? _mnSked_row;

  /// put the sql keyword 'AND'
  @override
  Sked_rowFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Sked_rowFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Sked_rowFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Sked_rowFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Sked_rowFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Sked_rowFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Sked_rowFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Sked_rowFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Sked_rowFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Sked_rowFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Sked_rowFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Sked_rowField _setField(Sked_rowField? field, String colName, DbType dbtype) {
    return Sked_rowField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Sked_rowField? _id;
  Sked_rowField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  Sked_rowField? _operator_name;
  Sked_rowField get operator_name {
    return _operator_name =
        _setField(_operator_name, 'operator_name', DbType.text);
  }

  Sked_rowField? _sort;
  Sked_rowField get sort {
    return _sort = _setField(_sort, 'sort', DbType.integer);
  }

  Sked_rowField? _sked_id;
  Sked_rowField get sked_id {
    return _sked_id = _setField(_sked_id, 'sked_id', DbType.integer);
  }

  Sked_rowField? _skedsId;
  Sked_rowField get skedsId {
    return _skedsId = _setField(_skedsId, 'skedsId', DbType.integer);
  }

  Sked_rowField? _data;
  Sked_rowField get data {
    return _data = _setField(_data, 'data', DbType.text);
  }

  Sked_rowField? _created_at;
  Sked_rowField get created_at {
    return _created_at = _setField(_created_at, 'created_at', DbType.datetime);
  }

  /// Deletes List<Sked_row> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSked_row!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSked_row!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from sked_rows ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSked_row!.updateBatch(qparams, values);
  }

  /// This method always returns [Sked_row] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sked_row?
  @override
  Future<Sked_row?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSked_row!.toList(qparams);
    final data = await objFuture;
    Sked_row? obj;
    if (data.isNotEmpty) {
      obj = Sked_row.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSked'))) {
          obj.plSked =
              obj.plSked ?? await obj.getSked(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Sked_row]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sked_row?
  @override
  Future<Sked_row> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Sked_row();
  }

  /// This method returns int. [Sked_row]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? sked_rowCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final sked_rowsFuture = await _mnSked_row!.toList(qparams);
    final int count = sked_rowsFuture[0]['CNT'] as int;
    if (sked_rowCount != null) {
      sked_rowCount(count);
    }
    return count;
  }

  /// This method returns List<Sked_row> [Sked_row]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Sked_row>
  @override
  Future<List<Sked_row>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Sked_row> sked_rowsData = await Sked_row.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return sked_rowsData;
  }

  /// This method returns Json String [Sked_row]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Sked_row]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Sked_row]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSked_row!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Sked_row]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM sked_rows WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSked_row!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Sked_row]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSked_row!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Sked_row.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSked_row!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Sked_rowFilterBuilder

// region Sked_rowFields
class Sked_rowFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fOperator_name;
  static TableField get operator_name {
    return _fOperator_name = _fOperator_name ??
        SqlSyntax.setField(_fOperator_name, 'operator_name', DbType.text);
  }

  static TableField? _fSort;
  static TableField get sort {
    return _fSort =
        _fSort ?? SqlSyntax.setField(_fSort, 'sort', DbType.integer);
  }

  static TableField? _fSked_id;
  static TableField get sked_id {
    return _fSked_id =
        _fSked_id ?? SqlSyntax.setField(_fSked_id, 'sked_id', DbType.integer);
  }

  static TableField? _fSkedsId;
  static TableField get skedsId {
    return _fSkedsId =
        _fSkedsId ?? SqlSyntax.setField(_fSkedsId, 'skedsId', DbType.integer);
  }

  static TableField? _fData;
  static TableField get data {
    return _fData = _fData ?? SqlSyntax.setField(_fData, 'data', DbType.text);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.datetime);
  }
}
// endregion Sked_rowFields

//region Sked_rowManager
class Sked_rowManager extends SqfEntityProvider {
  Sked_rowManager()
      : super(MyAppDatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'sked_rows';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion Sked_rowManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyAppDatabaseModelSequenceManager extends SqfEntityProvider {
  MyAppDatabaseModelSequenceManager() : super(MyAppDatabaseModel());
}
// END OF ENTITIES
